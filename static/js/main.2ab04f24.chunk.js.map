{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["divStyle","width","height","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","App","Component","constructor","props","super","state","visibleDownloadLink","visibleError","redeemCode","handleLink","renderDownloadLink","React","createElement","className","href","onClick","this","target","renderErrorMsg","handleSignin","updateInput","bind","handleSubmit","event","setState","value","dataMap","data","find","item","handleChange","e","console","log","render","style","src","alt","type","name","placeholder","onChange","onKeyPress","maxLength","required","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6o2BAMA,MAAMA,EAAW,CACfC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,+BACjBC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aAGpB,MAAMC,UAAYC,YAOjBC,YAAYC,GACXC,MAAMD,GAAO,KAPdE,MAAQ,CACPC,qBAAqB,EACrBC,cAAc,EACdC,WAAY,IACZ,KAiCDC,WAAa,OAEZ,KAEDC,mBAAqB,IACpBC,IAAAC,cAAA,OAAKC,UAAU,UACdF,IAAAC,cAAA,SAAG,mBAAgBD,IAAAC,cAAA,KAAGE,KAAK,wHAAwHC,QAASC,KAAKP,WAAYQ,OAAO,UAAS,cAE9L,KAEDC,eAAiB,IAChBP,IAAAC,cAAA,OAAKC,UAAU,UACdF,IAAAC,cAAA,SAAG,wBAEJ,KAEDO,aAAe,OA5CdH,KAAKI,YAAcJ,KAAKI,YAAYC,KAAKL,MACzCA,KAAKM,aAAeN,KAAKM,aAAaD,KAAKL,MAG5CI,YAAYG,GACXP,KAAKQ,SAAS,CAAChB,WAAae,EAAMN,OAAOQ,QAG1CH,eACcI,EAAQC,KAAKC,KAAKC,GAAQA,IAASb,KAAKX,MAAMG,YAK1DQ,KAAKQ,SAAS,CACblB,qBAAqB,EACrBC,cAAc,IAKfS,KAAKQ,SAAS,CACblB,qBAAqB,EACrBC,cAAc,IAyBjBuB,aAAaC,GACZC,QAAQC,IAAIF,GAUbG,SACC,OACCvB,IAAAC,cAAA,OAAKuB,MAAO1C,GACXkB,IAAAC,cAAA,OAAKC,UAAU,SACdF,IAAAC,cAAA,OAAKC,UAAU,cACdF,IAAAC,cAAA,OAAKwB,IAAK,oBAAqBC,IAAI,kBACnC1B,IAAAC,cAAA,OAAKC,UAAU,SACdF,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,UAAI,uCAGND,IAAAC,cAAA,OAAKC,UAAU,iBACdF,IAAAC,cAAA,OAAKC,UAAU,UAAS,mGACyEF,IAAAC,cAAA,WAAK,4FAGtGD,IAAAC,cAAA,OAAKC,UAAU,UAAS,sGAC4EF,IAAAC,cAAA,WAAK,oGACPD,IAAAC,cAAA,WAAK,qDAGvGD,IAAAC,cAAA,OAAKC,UAAU,UACdF,IAAAC,cAAA,OAAKC,UAAU,gBAAe,eACjBF,IAAAC,cAAA,WACZD,IAAAC,cAAA,WAAK,sGACyFD,IAAAC,cAAA,WAAK,kDAClDD,IAAAC,cAAA,WAAK,sCACxBD,IAAAC,cAAA,WAAK,gEACqBD,IAAAC,cAAA,WAAK,+FAI/DD,IAAAC,cAAA,OAAKC,UAAU,sBACdF,IAAAC,cAAA,YACCD,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAO0B,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAAcC,SAAUzB,KAAKI,YAAasB,WAAY1B,KAAKI,YAAauB,UAAU,KAAKC,UAAQ,IAC1IjC,IAAAC,cAAA,OAAKG,QAASC,KAAKM,aAAcT,UAAU,UAC1CF,IAAAC,cAAA,SAAG,aAILI,KAAKX,MAAME,cAAgBS,KAAKE,iBAChCF,KAAKX,MAAMC,qBAAuBU,KAAKN,yBAQ/BV,QC1HK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OACPvB,IAAAC,cAACD,IAAMwC,WAAU,KACfxC,IAAAC,cAACZ,EAAG,OAENoD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.2ab04f24.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './index.css'\r\n\r\nimport dataMap from './RedeemCode_WitchSpringR.json';\r\n\r\nconst divStyle = {\r\n  width: '100%',\r\n  height: 'auto',\r\n  backgroundImage: 'url(./images/Background.jpg)',\r\n  backgroundPosition: 'center',\r\n  backgroundSize: 'cover',\r\n  backgroundRepeat: 'no-repeat',\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tvisibleDownloadLink: false,\r\n\t\tvisibleError: false,\r\n\t\tredeemCode: \"\",\r\n\t}\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.updateInput = this.updateInput.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\t\r\n\tupdateInput(event){\r\n\t\tthis.setState({redeemCode : event.target.value});\r\n\t}\r\n\r\n\thandleSubmit(){\r\n\t\tlet result = dataMap.data.find(item => item === this.state.redeemCode);\r\n\t\t\r\n\t\t//console.log('Your input value is: ' + this.state.redeemCode);\r\n\t\tif (result)\r\n\t\t{\r\n\t\t\tthis.setState({ \r\n\t\t\t\tvisibleDownloadLink: true,\r\n\t\t\t\tvisibleError: false\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.setState({ \r\n\t\t\t\tvisibleDownloadLink: false,\r\n\t\t\t\tvisibleError: true\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\thandleLink = () => {\r\n\t\t\r\n\t}\r\n\r\n\trenderDownloadLink = () => (\r\n\t\t<div className=\"redeem\">\r\n\t\t\t<p>Download Link - <a href='https://www.dropbox.com/scl/fo/3cx74attvairbe19esrje/AC7hL4mvP2SX485w1BjJxsc?rlkey=n8xwzgglz3u6920didaxf42p4&e=1&dl=0' onClick={this.handleLink} target='_blank'>Download</a></p>\r\n\t\t</div>\r\n\t)\r\n\t\r\n\trenderErrorMsg = () => (\r\n\t\t<div className=\"errmsg\">\r\n\t\t\t<p>Invalid Redeem Code</p>\r\n\t\t</div>\r\n\t)\r\n\r\n\thandleSignin = () => {\r\n\t\t\r\n\t}\r\n\t\r\n\thandleChange(e) {\r\n\t\tconsole.log(e);\r\n\t\treturn;\r\n\t\tconst { name, value } = e.target;\r\n\t\tif(name === 'code') \r\n\t\t\tthis.setState({ redeemCode: value });\r\n\r\n\t\tconst { changeInput } = this.props;\r\n\t\tchangeInput({ name, value });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={divStyle}>\r\n\t\t\t\t<div className=\"frame\">\r\n\t\t\t\t\t<div className=\"top center\">\r\n\t\t\t\t\t\t<img src={'./images/Logo.png'} alt='WitchSpring R' />\r\n\t\t\t\t\t\t<div className=\"title\">\r\n\t\t\t\t\t\t\t<h1>WitchSpring R</h1>\r\n\t\t\t\t\t\t\t<h1>Bonus Digital Soundtrack Download</h1>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"middle center\">\r\n\t\t\t\t\t\t<div className=\"text01\">\r\n\t\t\t\t\t\t\tThank you for purchasing WitchSpring R. This is the Downloadable Soundtrack page to redeem your <br/> \r\n\t\t\t\t\t\t\tbonus voucher included with first print copies for PlayStation 5 and/or Nintendo Switch.\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text02\">\r\n\t\t\t\t\t\t\t**This is not to purchase the actual game. Please do not purchase this item as it is non-refundable<br/> \r\n\t\t\t\t\t\t\tand only to download the digital soundtrack. The purpose of this page is for Downloadable voucher<br/> \r\n\t\t\t\t\t\t\tredemption included with certain retail copies.**\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text03\">\r\n\t\t\t\t\t\t\t<div className=\"padding-l-32\">\r\n\t\t\t\t\t\t\t\tPlease note:<br/> \r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t• Bonus vouchers are only available in first print copies and brand new factory sealed copies.<br/> \r\n\t\t\t\t\t\t\t\t  We are not responsible for opened merchandise. <br/> \r\n\t\t\t\t\t\t\t\t• Please download to your PC. <br/> \r\n\t\t\t\t\t\t\t\t• A zip file containing sound files will be downloaded. <br/> \r\n\t\t\t\t\t\t\t\t• Cannot be re-issued. No returns accepted, non-transferable unless stated otherwise.\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"signup margin-b-16\">\r\n\t\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t\t<h2>Enter Redeem Code</h2>\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"code\" placeholder=\"Redeem Code\" onChange={this.updateInput} onKeyPress={this.updateInput} maxLength=\"10\" required />\r\n\t\t\t\t\t\t\t\t<div onClick={this.handleSubmit} className=\"submit\">\r\n\t\t\t\t\t\t\t\t\t<p>Submit</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{this.state.visibleError && this.renderErrorMsg()}\r\n\t\t\t\t\t\t{this.state.visibleDownloadLink && this.renderDownloadLink()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}